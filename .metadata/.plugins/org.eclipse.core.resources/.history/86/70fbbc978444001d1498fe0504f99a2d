package com.example.spring02.controller.upload;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.example.spring02.util.UploadFileUtils;

@Controller
public class AjaxUploadController {
	//로깅
	private static final Logger logger=
			LoggerFactory.getLogger(AjaxUploadController.class);
	//업로드 디렉토리(servlet-context에서 설정한 파일 디렉토리  id와 동일한 이름으로 설정)
	@Resource(name="uploadPath")
	String uploadPath;
	
	@RequestMapping(value="/upload/uploadAjax", method=RequestMethod.GET) //value는 생략가능
	public String uploadAjax() {
		return "/upload/uploadAjax";
	}
	@ResponseBody //json형식으로 응답해줌
	@RequestMapping(value="/upload/uploadAjax",
			method=RequestMethod.POST,produces="text/plain;charset=utf-8")//한글이 깨지지 않도록 처리
	//업로드한 파일정보와 Http 상태코드를 함께 리턴
	public ResponseEntity<String> uploadAjax(MultipartFile file) throws Exception{
		//view의 이름이 아니라 data 자체를 보내는 처리
		return new ResponseEntity<String>
		(UploadFileUtils.uploadFile(uploadPath, file.getOriginalFilename(), file.getBytes()),HttpStatus.OK);
		//파일 성공여부는 uploadAjax.jsp의 function(data,status, rep)으로 넘어감
		
	}
}
